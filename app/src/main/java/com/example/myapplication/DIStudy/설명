

의존성 주입 스터디

1. 직접 DI 구현

Dagger2, Hilt와 같은 의존성 라이브러리 없이,
DI의 원리를 이해하기 위해서 직접 구현해보는 방식 사용
로그인 플로우 구현을 DI로 구현

프로젝트 구조

[ Login Activity ]
   - > [ Login ViewModel ]
              - > [ UserRepository ]
                              - > [ UserLocalDataSource ]

                              - > [ UserRemoteDataSource ]
                                                - > [ Retrofit ]


[첫번째 코드]
보일러플레이트가 많다 (변화없이 여러 군데에서 반복되는 코드)
- 다른 부분에서 LoginViewModel의 다른 인스턴스를 만들려면 중복된 코드 발생
객체를 재사용하기 어려움
- 여러 부분에서 UserRepository를 재사용하려면 싱글톤 패턴을 따르게 해야 함
- 하지만 싱글톤으로 구현해도 모든 테스트가 동일한 인스턴스를 공유 -> 다양한 시나리오 테스트 어려움

[두번째 코드]
Container로 Dependency 관리

- 객체 재사용 문제 해결
- 자처젝인 Dependency Container 클래스 생성
- 이 컨테이너에서 제공하는 인스턴스는 외부로 공개할 수 있음
- UserRepository 인스턴스를 public 상태로 둠


-> Container를 활용하므로써 재사용성이 높아졌다. 하지만 아래와 같은 문제 발생

- AppContainer를 직접 관리하기 때문에 모든 디펜던시의 인스턴스를 수동으로 생성
- 여전히 많은 보일러플레이트 코드
- 객체를 재사용할지에 따라 팩토리, 파라미터도 생성해야함
- 프로젝트에 기능이 많이 포함 될 경우 복잡해지는 문제 발생

-> 로그인 플로우를 위한 전용 컨테이너를 제작해서 요구 조건을 충족할 수 있다.
-> 하지만 앱이 커질 수록 오류 발생 가능성이 커지며, 자잘한 버그와 메모리 릭이 발생


** 이를 해결하기 위해서 Dagger, Hilt와 같은 DI 라이브러리 생성